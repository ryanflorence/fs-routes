/** @license React vundefined
 * react-interactions-events/press.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var tap = require('react-interactions/events/tap');
var keyboard = require('react-interactions/events/keyboard');

var emptyObject = {};

function createGestureState(e, type) {
  return {
    altKey: e.altKey,
    buttons: e.type === 'tap:auxiliary' ? 4 : 1,
    ctrlKey: e.ctrlKey,
    defaultPrevented: e.defaultPrevented,
    key: e.key,
    metaKey: e.metaKey,
    pageX: e.pageX,
    pageY: e.pageX,
    pointerType: e.pointerType,
    shiftKey: e.shiftKey,
    target: e.target,
    timeStamp: e.timeStamp,
    type: type,
    x: e.x,
    y: e.y
  };
}

function isValidKey(e) {
  var key = e.key,
      target = e.target;
  var _ref = target,
      tagName = _ref.tagName,
      isContentEditable = _ref.isContentEditable;
  return (key === 'Enter' || key === ' ') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true;
}

function handlePreventDefault(preventDefault, e) {
  var key = e.key;

  if (preventDefault !== false && (key === ' ' || key === 'Enter')) {
    e.preventDefault();
  }
}
/**
 * The lack of built-in composition for gesture responders means we have to
 * selectively ignore callbacks from useKeyboard or useTap if the other is
 * active.
 */


function usePress(props) {
  var safeProps = props || emptyObject;
  var disabled = safeProps.disabled,
      preventDefault = safeProps.preventDefault,
      onPress = safeProps.onPress,
      onPressChange = safeProps.onPressChange,
      onPressEnd = safeProps.onPressEnd,
      onPressMove = safeProps.onPressMove,
      onPressStart = safeProps.onPressStart;

  var _React$useState = React.useState(null),
      active = _React$useState[0],
      updateActive = _React$useState[1];

  var tap$$1 = tap.useTap({
    disabled: disabled || active === 'keyboard',
    preventDefault: preventDefault,
    onAuxiliaryTap: function (e) {
      if (onPressStart != null) {
        onPressStart(createGestureState(e, 'pressstart'));
      }

      if (onPressEnd != null) {
        onPressEnd(createGestureState(e, 'pressend'));
      } // Here we rely on Tap only calling 'onAuxiliaryTap' with modifiers when
      // the primary button is pressed


      if (onPress != null && (e.metaKey || e.shiftKey)) {
        onPress(createGestureState(e, 'press'));
      }
    },
    onTapStart: function (e) {
      if (active == null) {
        updateActive('tap');

        if (onPressStart != null) {
          onPressStart(createGestureState(e, 'pressstart'));
        }
      }
    },
    onTapChange: onPressChange,
    onTapUpdate: function (e) {
      if (active === 'tap') {
        if (onPressMove != null) {
          onPressMove(createGestureState(e, 'pressmove'));
        }
      }
    },
    onTapEnd: function (e) {
      if (active === 'tap') {
        if (onPressEnd != null) {
          onPressEnd(createGestureState(e, 'pressend'));
        }

        if (onPress != null) {
          onPress(createGestureState(e, 'press'));
        }

        updateActive(null);
      }
    },
    onTapCancel: function (e) {
      if (active === 'tap') {
        if (onPressEnd != null) {
          onPressEnd(createGestureState(e, 'pressend'));
        }

        updateActive(null);
      }
    }
  });
  var keyboard$$1 = keyboard.useKeyboard({
    disabled: disabled || active === 'tap',
    onClick: function (e) {
      if (preventDefault !== false) {
        e.preventDefault();
      }

      if (active == null && onPress != null) {
        onPress(createGestureState(e, 'press'));
      }
    },
    onKeyDown: function (e) {
      if (active == null && isValidKey(e)) {
        handlePreventDefault(preventDefault, e);
        updateActive('keyboard');

        if (onPressStart != null) {
          onPressStart(createGestureState(e, 'pressstart'));
        }

        if (onPressChange != null) {
          onPressChange(true);
        }
      }
    },
    onKeyUp: function (e) {
      if (active === 'keyboard' && isValidKey(e)) {
        handlePreventDefault(preventDefault, e);

        if (onPressChange != null) {
          onPressChange(false);
        }

        if (onPressEnd != null) {
          onPressEnd(createGestureState(e, 'pressend'));
        }

        if (onPress != null) {
          onPress(createGestureState(e, 'press'));
        }

        updateActive(null);
      }
    }
  });
  return [tap$$1, keyboard$$1];
}

var Press = Object.freeze({
	usePress: usePress
});

var press = Press;

module.exports = press;
  })();
}
