/** @license React vundefined
 * react-interactions-accessibility/tab-focus.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var tabbableScope = require('react-interactions/accessibility/tabbable-scope');
var keyboard = require('react-interactions/events/keyboard');

var useRef = React.useRef;

function getTabbableNodes(scope) {
  var tabbableNodes = scope.getScopedNodes();

  if (tabbableNodes === null || tabbableNodes.length === 0) {
    return [null, null, null, 0, null];
  }

  var firstTabbableElem = tabbableNodes[0];
  var lastTabbableElem = tabbableNodes[tabbableNodes.length - 1];
  var currentIndex = tabbableNodes.indexOf(document.activeElement);
  var focusedElement = null;

  if (currentIndex !== -1) {
    focusedElement = tabbableNodes[currentIndex];
  }

  return [tabbableNodes, firstTabbableElem, lastTabbableElem, currentIndex, focusedElement];
}

function focusFirst(scope) {
  var _getTabbableNodes = getTabbableNodes(scope),
      firstTabbableElem = _getTabbableNodes[1];

  focusElem(firstTabbableElem);
}

function focusElem(elem) {
  if (elem !== null) {
    elem.focus();
  }
}

function internalFocusNext(scope, event, contain) {
  var _getTabbableNodes2 = getTabbableNodes(scope),
      tabbableNodes = _getTabbableNodes2[0],
      firstTabbableElem = _getTabbableNodes2[1],
      lastTabbableElem = _getTabbableNodes2[2],
      currentIndex = _getTabbableNodes2[3],
      focusedElement = _getTabbableNodes2[4];

  if (focusedElement === null) {
    if (event) {
      event.continuePropagation();
    }
  } else if (focusedElement === lastTabbableElem) {
    if (contain) {
      focusElem(firstTabbableElem);

      if (event) {
        event.preventDefault();
      }
    } else if (event) {
      event.continuePropagation();
    }
  } else {
    focusElem(tabbableNodes[currentIndex + 1]);

    if (event) {
      event.preventDefault();
    }
  }
}

function internalFocusPrevious(scope, event, contain) {
  var _getTabbableNodes3 = getTabbableNodes(scope),
      tabbableNodes = _getTabbableNodes3[0],
      firstTabbableElem = _getTabbableNodes3[1],
      lastTabbableElem = _getTabbableNodes3[2],
      currentIndex = _getTabbableNodes3[3],
      focusedElement = _getTabbableNodes3[4];

  if (focusedElement === null) {
    if (event) {
      event.continuePropagation();
    }
  } else if (focusedElement === firstTabbableElem) {
    if (contain) {
      focusElem(lastTabbableElem);

      if (event) {
        event.preventDefault();
      }
    } else if (event) {
      event.continuePropagation();
    }
  } else {
    focusElem(tabbableNodes[currentIndex - 1]);

    if (event) {
      event.preventDefault();
    }
  }
}

function focusPrevious(scope) {
  internalFocusPrevious(scope);
}
function focusNext(scope) {
  internalFocusNext(scope);
}
function getNextController(scope) {
  var allScopes = scope.getChildrenFromRoot();

  if (allScopes === null) {
    return null;
  }

  var currentScopeIndex = allScopes.indexOf(scope);

  if (currentScopeIndex === -1 || currentScopeIndex === allScopes.length - 1) {
    return null;
  }

  return allScopes[currentScopeIndex + 1];
}
function getPreviousController(scope) {
  var allScopes = scope.getChildrenFromRoot();

  if (allScopes === null) {
    return null;
  }

  var currentScopeIndex = allScopes.indexOf(scope);

  if (currentScopeIndex <= 0) {
    return null;
  }

  return allScopes[currentScopeIndex - 1];
}
var TabFocusController = React.forwardRef(function (_ref, ref) {
  var children = _ref.children,
      contain = _ref.contain;
  var scopeRef = useRef(null);
  var keyboard$$1 = keyboard.useKeyboard({
    onKeyDown: function (event) {
      if (event.key !== 'Tab') {
        event.continuePropagation();
        return;
      }

      var scope = scopeRef.current;

      if (scope !== null) {
        if (event.shiftKey) {
          internalFocusPrevious(scope, event, contain);
        } else {
          internalFocusNext(scope, event, contain);
        }
      }
    }
  });
  return React.createElement(tabbableScope.TabbableScope, {
    ref: function (node) {
      if (ref) {
        if (typeof ref === 'function') {
          ref(node);
        } else {
          ref.current = node;
        }
      }

      scopeRef.current = node;
    },
    listeners: keyboard$$1
  }, children);
});

var TabFocus = Object.freeze({
	focusFirst: focusFirst,
	focusPrevious: focusPrevious,
	focusNext: focusNext,
	getNextController: getNextController,
	getPreviousController: getPreviousController,
	TabFocusController: TabFocusController
});

var tabFocus = TabFocus;

module.exports = tabFocus;
  })();
}
