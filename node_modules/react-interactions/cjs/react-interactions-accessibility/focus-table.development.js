/** @license React vundefined
 * react-interactions-accessibility/focus-table.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';



if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = require('react');
var tabbableScope = require('react-interactions/accessibility/tabbable-scope');
var keyboard = require('react-interactions/events/keyboard');

var useRef = React.useRef;
function focusFirstCellOnTable(table) {
  var rows = table.getChildren();

  if (rows !== null) {
    var firstRow = rows[0];

    if (firstRow !== null) {
      var cells = firstRow.getChildren();

      if (cells !== null) {
        var firstCell = cells[0];

        if (firstCell !== null) {
          var tabbableNodes = firstCell.getScopedNodes();

          if (tabbableNodes !== null) {
            var firstElem = tabbableNodes[0];

            if (firstElem !== null) {
              firstElem.focus();
            }
          }
        }
      }
    }
  }
}

function focusCell(cell) {
  var tabbableNodes = cell.getScopedNodes();

  if (tabbableNodes !== null && tabbableNodes.length > 0) {
    tabbableNodes[0].focus();
  }
}

function focusCellByRowIndex(row, rowIndex) {
  var cells = row.getChildren();

  if (cells !== null) {
    var cell = cells[rowIndex];

    if (cell) {
      focusCell(cell);
    }
  }
}

function getRowCells(currentCell) {
  var row = currentCell.getParent();

  if (row !== null && row.getProps().type === 'row') {
    var cells = row.getChildren();

    if (cells !== null) {
      var rowIndex = cells.indexOf(currentCell);
      return [cells, rowIndex];
    }
  }

  return [null, 0];
}

function getRows(currentCell) {
  var row = currentCell.getParent();

  if (row !== null && row.getProps().type === 'row') {
    var table = row.getParent();

    if (table !== null && table.getProps().type === 'table') {
      var rows = table.getChildren();

      if (rows !== null) {
        var columnIndex = rows.indexOf(row);
        return [rows, columnIndex];
      }
    }
  }

  return [null, 0];
}

function triggerNavigateOut(currentCell, direction) {
  var row = currentCell.getParent();

  if (row !== null && row.getProps().type === 'row') {
    var table = row.getParent();

    if (table !== null) {
      var props = table.getProps();
      var onKeyboardOut = props.onKeyboardOut;

      if (props.type === 'table' && typeof onKeyboardOut === 'function') {
        var _focusTableByID = function (id) {
          var topLevelTables = table.getChildrenFromRoot();

          if (topLevelTables !== null) {
            for (var i = 0; i < topLevelTables.length; i++) {
              var topLevelTable = topLevelTables[i];

              if (topLevelTable.getProps().id === id) {
                focusFirstCellOnTable(topLevelTable);
                return;
              }
            }
          }
        };

        onKeyboardOut(direction, _focusTableByID);
      }
    }
  }
}

function createFocusTable() {
  var TableScope = React.unstable_createScope(tabbableScope.tabFocusableImpl);

  function Table(_ref) {
    var children = _ref.children,
        onKeyboardOut = _ref.onKeyboardOut,
        id = _ref.id;
    return React.createElement(TableScope, {
      type: "table",
      onKeyboardOut: onKeyboardOut,
      id: id
    }, children);
  }

  function Row(_ref2) {
    var children = _ref2.children;
    return React.createElement(TableScope, {
      type: "row"
    }, children);
  }

  function Cell(_ref3) {
    var children = _ref3.children;
    var scopeRef = useRef(null);
    var keyboard$$1 = keyboard.useKeyboard({
      onKeyDown: function (event) {
        var currentCell = scopeRef.current;

        switch (event.key) {
          case 'UpArrow':
            {
              var _getRowCells = getRowCells(currentCell),
                  cells = _getRowCells[0],
                  rowIndex = _getRowCells[1];

              if (cells !== null) {
                var _getRows = getRows(currentCell),
                    columns = _getRows[0],
                    columnIndex = _getRows[1];

                if (columns !== null) {
                  if (columnIndex > 0) {
                    var column = columns[columnIndex - 1];
                    focusCellByRowIndex(column, rowIndex);
                  } else if (columnIndex === 0) {
                    triggerNavigateOut(currentCell, 'up');
                  }
                }
              }

              return;
            }

          case 'DownArrow':
            {
              var _getRowCells2 = getRowCells(currentCell),
                  _cells = _getRowCells2[0],
                  _rowIndex = _getRowCells2[1];

              if (_cells !== null) {
                var _getRows2 = getRows(currentCell),
                    _columns = _getRows2[0],
                    _columnIndex = _getRows2[1];

                if (_columns !== null) {
                  if (_columnIndex !== -1) {
                    if (_columnIndex === _columns.length - 1) {
                      triggerNavigateOut(currentCell, 'down');
                    } else {
                      var _column = _columns[_columnIndex + 1];
                      focusCellByRowIndex(_column, _rowIndex);
                    }
                  }
                }
              }

              return;
            }

          case 'LeftArrow':
            {
              var _getRowCells3 = getRowCells(currentCell),
                  _cells2 = _getRowCells3[0],
                  _rowIndex2 = _getRowCells3[1];

              if (_cells2 !== null) {
                if (_rowIndex2 > 0) {
                  focusCell(_cells2[_rowIndex2 - 1]);
                } else if (_rowIndex2 === 0) {
                  triggerNavigateOut(currentCell, 'left');
                }
              }

              return;
            }

          case 'RightArrow':
            {
              var _getRowCells4 = getRowCells(currentCell),
                  _cells3 = _getRowCells4[0],
                  _rowIndex3 = _getRowCells4[1];

              if (_cells3 !== null) {
                if (_rowIndex3 !== -1) {
                  if (_rowIndex3 === _cells3.length - 1) {
                    triggerNavigateOut(currentCell, 'right');
                  } else {
                    focusCell(_cells3[_rowIndex3 + 1]);
                  }
                }
              }

              return;
            }
        }

        event.continuePropagation();
      }
    });
    return React.createElement(TableScope, {
      listeners: keyboard$$1,
      ref: scopeRef,
      type: "cell"
    }, children);
  }

  return [Table, Row, Cell];
}

var FocusTable = Object.freeze({
	focusFirstCellOnTable: focusFirstCellOnTable,
	createFocusTable: createFocusTable
});

var focusTable = FocusTable;

module.exports = focusTable;
  })();
}
